
New distros schema (bug 800687)
-------------------------------

This upgrade requires that all existing distros be re-imported into Beaker.
Ensure that you have an up-to-date database backup before proceeding.

    -- distro becomes distro_tree
    RENAME TABLE distro TO distro_tree;

    -- create distro table from existing distro_trees
    CREATE TABLE distro
        (id INT NOT NULL AUTO_INCREMENT,
        name VARCHAR(255) NOT NULL,
        osversion_id INT NOT NULL,
        date_created DATETIME NOT NULL,
        PRIMARY KEY (id),
        UNIQUE (name),
        CONSTRAINT distro_osversion_id_fk
            FOREIGN KEY (osversion_id) REFERENCES osversion (id))
        ENGINE=InnoDB
        SELECT NULL AS id, name, MAX(osversion_id) AS osversion_id, UTC_TIMESTAMP() AS date_created
            FROM distro_tree
            GROUP BY name;
    ALTER TABLE distro_tree
        DROP FOREIGN KEY distro_tree_ibfk_1, -- breed_id fk
        DROP FOREIGN KEY distro_tree_ibfk_3, -- osversion_id fk
        DROP install_name,
        DROP breed_id,
        DROP osversion_id,
        DROP virt,
        MODIFY arch_id INT NOT NULL,
        MODIFY date_created DATETIME NOT NULL,
        ADD distro_id INT DEFAULT NULL AFTER id,
        ADD ks_meta TEXT AFTER variant,
        ADD kernel_options TEXT AFTER ks_meta,
        ADD kernel_options_post TEXT AFTER kernel_options;
    -- If your schema is old, it might still contain an obsolete "method" column as well:
    --ALTER TABLE distro_tree DROP method;
    UPDATE distro_tree
        INNER JOIN distro ON distro_tree.name = distro.name
        SET distro_tree.distro_id = distro.id;
    ALTER TABLE distro_tree
        DROP name,
        MODIFY distro_id INT NOT NULL,
        ADD CONSTRAINT distro_tree_distro_id_fk
            FOREIGN KEY (distro_id) REFERENCES distro (id);

    -- In the following upgrades, we merge duplicate distro_trees into the
    -- lowest matching id, so that we can clean them up below and add a
    -- uniqe constraint.

    -- distro_activity becomes distro_tree_activity, with duplicates merged
    RENAME TABLE distro_activity TO distro_tree_activity;
    ALTER TABLE distro_tree_activity
        ADD distro_tree_id INT DEFAULT NULL AFTER distro_id,
        ADD CONSTRAINT distro_tree_activity_distro_tree_id_fk
            FOREIGN KEY (distro_tree_id) REFERENCES distro_tree (id);
    UPDATE distro_tree_activity
        INNER JOIN distro_tree ON distro_tree_activity.distro_id = distro_tree.id
        -- this is the least-row-per-group trick
        INNER JOIN (
            SELECT MIN(id) AS id, distro_id, arch_id, variant
            FROM distro_tree
            GROUP BY distro_id, arch_id, variant) AS x
            ON x.distro_id = distro_tree.distro_id
                AND x.arch_id = distro_tree.arch_id
                AND x.variant <=> distro_tree.variant
        SET distro_tree_activity.distro_tree_id = x.id;
    ALTER TABLE distro_tree_activity
        DROP FOREIGN KEY distro_tree_activity_ibfk_2, -- distro_id fk
        DROP distro_id;
    UPDATE activity
        SET type = 'distro_tree_activity'
        WHERE type = 'distro_activity';

    -- recipe.distro_id becomes recipe.distro_tree_id
    ALTER TABLE recipe
        ADD distro_tree_id INT DEFAULT NULL AFTER distro_id,
        ADD CONSTRAINT recipe_distro_tree_id_fk
            FOREIGN KEY (distro_tree_id) REFERENCES distro_tree (id);
    UPDATE recipe
        INNER JOIN distro_tree ON recipe.distro_id = distro_tree.id
        INNER JOIN (
            SELECT MIN(id) AS id, distro_id, arch_id, variant
            FROM distro_tree
            GROUP BY distro_id, arch_id, variant) AS x
            ON x.distro_id = distro_tree.distro_id
                AND x.arch_id = distro_tree.arch_id
                AND x.variant <=> distro_tree.variant
        SET recipe.distro_tree_id = x.id;
    ALTER TABLE recipe
        DROP FOREIGN KEY recipe_ibfk_3, -- distro_id fk
        DROP distro_id;
    ALTER TABLE system
        ADD reprovision_distro_tree_id INT DEFAULT NULL AFTER reprovision_distro_id,
        ADD CONSTRAINT system_reprovision_distro_tree_id_fk
            FOREIGN KEY (reprovision_distro_tree_id) REFERENCES distro_tree (id);

    -- system.reprovision_distro_id becomes system.reprovision_distro_tree_id
    UPDATE system
        INNER JOIN distro_tree ON system.reprovision_distro_id = distro_tree.id
        INNER JOIN (
            SELECT MIN(id) AS id, distro_id, arch_id, variant
            FROM distro_tree
            GROUP BY distro_id, arch_id, variant) AS x
            ON x.distro_id = distro_tree.distro_id
                AND x.arch_id = distro_tree.arch_id
                AND x.variant <=> distro_tree.variant
        SET system.reprovision_distro_tree_id = x.id;
    ALTER TABLE system
        DROP FOREIGN KEY system_ibfk_1, -- reprovision_distro_id fk
        DROP reprovision_distro_id;

    -- this table is replaced by distro_tree_lab_controller_map
    DROP TABLE distro_lab_controller_map;

    -- remove the duplicate distro_trees
    DELETE FROM distro_tree
        USING distro_tree
        INNER JOIN (
            SELECT MIN(id) AS id, distro_id, arch_id, variant
            FROM distro_tree
            GROUP BY distro_id, arch_id, variant) AS x
            ON x.distro_id = distro_tree.distro_id
                AND x.arch_id = distro_tree.arch_id
                AND x.variant <=> distro_tree.variant
        WHERE distro_tree.id != x.id;
    ALTER TABLE distro_tree
        ADD UNIQUE (distro_id, arch_id, variant);

    -- we don't store breed anymore
    DROP TABLE breed;

    -- move tags from distro_tree to distro
    CREATE TABLE distro_tag_map_new
        (distro_id INT NOT NULL,
        distro_tag_id INT NOT NULL,
        PRIMARY KEY (distro_id, distro_tag_id),
        CONSTRAINT distro_tag_map_distro_id_fk
            FOREIGN KEY (distro_id) REFERENCES distro (id)
            ON UPDATE CASCADE ON DELETE CASCADE,
        CONSTRAINT distro_tag_map_distro_tag_id_fk
            FOREIGN KEY (distro_tag_id) REFERENCES distro_tag (id)
            ON UPDATE CASCADE ON DELETE CASCADE)
        ENGINE=InnoDB
        SELECT DISTINCT distro.id AS distro_id, distro_tag_map.distro_tag_id
            FROM distro_tag_map
            INNER JOIN distro_tree ON distro_tag_map.distro_id = distro_tree.id
            INNER JOIN distro ON distro_tree.distro_id = distro.id;
    DROP TABLE distro_tag_map;
    RENAME TABLE distro_tag_map_new TO distro_tag_map;

    -- these are unused
    ALTER TABLE lab_controller
        DROP distros_md5,
        DROP systems_md5;

Then run beaker-init to create the new distro tables.

Finally, import distros using the beaker-import command on each lab controller.


Provision via the command queue
-------------------------------

Run the following SQL:

    ALTER TABLE command_queue
        ADD distro_tree_id INT NULL,
        ADD kernel_options TEXT NULL,
        ADD CONSTRAINT command_queue_distro_tree_id_fk
            FOREIGN KEY (distro_tree_id)
            REFERENCES distro_tree (id);
    ALTER TABLE recipe
        ADD rendered_kickstart_id INT NULL AFTER system_id,
        ADD CONSTRAINT recipe_rendered_kickstart_id_fk
            FOREIGN KEY (rendered_kickstart_id)
            REFERENCES rendered_kickstart (id);
