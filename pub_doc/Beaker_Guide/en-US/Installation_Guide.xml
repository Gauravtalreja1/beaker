<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="Installation">
<title>Installation</title>
  <para>
    The installation guide will teach you how to install Beaker into your system.
  </para>
  <section id="Installation-Install_Beaker">
    <title>Install Beaker</title>
      <para>
        To install Beaker packages (and dependencies) you'll need to get the
        repo file then copy it to your <emphasis>/etc/yum.repos.d/</emphasis>
        directory.
      </para>
      <para>
        There are two main repos. One containing packages needed for
        installing the Beaker server and required components, another for packages needed to run the
        Beaker client. Basic tasks needed by Beaker can also be found
        <ulink url="http://repos.fedorapeople.org/repos/beaker/tasks">here</ulink>.
        You can find the repo directory
        <ulink url="http://repos.fedorapeople.org/repos/beaker/">here</ulink>.
        Please download the repo file that suits your requirements.
      </para>

      <para>Install the dependencies.
        <screen>$ yum -y install rpm-build python-devel TurboGears python-TurboMail
$ yum -y install mod_wsgi python-decorator python-tgexpandingformwidget python-xmltramp
        </screen>
      </para>
      <para>Install Beaker server.
        <screen>$ yum install beaker-server </screen>
      </para>
    <section id="Installation-Install_Beaker-Install_DB">
    <title>Install DB</title>
    <para>
    Beaker uses the <ulink url="http://www.sqlalchemy.org/">sqlalchemy</ulink> 
    database library, which supports a large number of databases (including 
    MySQL, PostgreSQL, SQLite, Oracle, and Microsoft SQL Server) provided that 
    a suitable client driver is installed. However Beaker is only tested 
    against MySQL, so it is recommended to use that.
    </para>
    <para>
    For this tutorial, we will use MySQL. First, make sure MySQL server is installed, and configure the daemon to run at startup. 
      <screen>$ yum install -y mysql-server MySQL-python
$ chkconfig mysqld on
      </screen>
    </para>
    <para>
    For Unicode support in Beaker, it is recommended to configure MySQL to store strings as 
    UTF-8. This is controlled by the <literal>character-set-server</literal> option in 
    <filename>/etc/my.cnf</filename>:
      <screen>
[mysqld]
...
character-set-server=utf8
      </screen>
    </para>
    <para>
    Now start the MySQL server:
      <screen>
$ service mysqld start
      </screen>
    </para>
    <para>
    Create a database, and grant access to beaker user. You can put the database on the local machine, or on a remote machine. In the example below, the database is hosted on the local machine.
    <screen>
    $ echo "create database beaker;" | mysql
    $ echo "grant all on beaker.* to 'beaker'@'localhost' IDENTIFIED BY 'beaker';"| mysql
    </screen>
    </para>
    <para>
    Now let's initialise our DB with tables. We'll also create an admin account called <emphasis>admin</emphasis> with password <emphasis>testing</emphasis>, and email <emphasis>root@localhost</emphasis>. 
    <screen>
    $ beaker-init -u admin -p testing -e root@localhost
    </screen>
    </para>
  </section>
  <section id="Installation-Install_Beaker-Start_Beaker">
    <title>Start Beaker</title>
    <para>We are now ready to start the Beaker service. Make sure you have the following line in your /etc/httpd/conf.d/wsgi.conf and that it is uncommented. 
    <screen>
       LoadModule wsgi_module modules/mod_wsgi.so
</screen>
    </para>
    <para>First make sure apache is on and configured to run on startup. 
      <screen>
      $ sudo chkconfig httpd on
      $ sudo /sbin/service httpd start
      </screen>
    </para>
    <para>We need to switch SELinux off. 
      <screen>
      $ setenforce 0
      </screen>
       </para>
       <para>
       Due to permission issues, we need to delete the log file before we start Beaker for the first time. Otherwise Beaker will not run properly. 
       <screen>
       $ sudo rm /var/log/beaker/server*.log
       $ sudo rm /var/log/beaker/server*.lock
       </screen>
       </para>
       <para>
       Start Beaker and configure it to run on startup. 
       <screen>
       $ sudo chkconfig beakerd on
       $ sudo /sbin/service beakerd start
       </screen>
       </para>
       <para>
       To make sure Beaker is running go to <ulink 
       url="http://BeakerServer.example.com/bkr/"/> in your browser.
       </para>
       <formalpara>
       <title>Add Lab Controller details</title>
       <para>
       One more step that we need to do is add the Lab Controller that we are 
       yet to configure in <xref linkend="Installation-Setup_Lab_Controller"/>. 
       Log in at <ulink 
       url="http://BeakerServer.example.com/bkr/labcontrollers/new"/>. Use the 
       username and password above from the <command>beaker-init</command> 
       command. The new lab controller form requires the following fields:
        <itemizedlist>
          <listitem>
            <para>
              <application>FQDN</application>: This is the fully qualified domain name of the lab controller. 
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Username</application>: 
                                              This is the login name that the lab controller will use to login to beaker.  
                                              Because this is a machine account we recommend prepending it with host/, so for example host/lab_controller.example.com
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Password</application>: This is the password that goes along with the username, again we will use : <emphasis>testing</emphasis>
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Lab Controller Email Address</application>: All user accounts require a unique email address, you can use root@FQDN of lab controller.
            </para>
          </listitem>

          <listitem>
            <para>
              <application>Cobbler Username</application>:This is the login name we will use to communicate with the lab controller, for the purposes of this document will use the login name <literal>testing</literal>
            </para>
          </listitem>

          <listitem>
            <para>
              <application>Cobbler Password</application>: This is the password that goes along with the cobbler username, again we will use : <literal>testing</literal>
            </para>
          </listitem>
        </itemizedlist>
       </para>
       </formalpara>
       <para>Save the form and we are done with the Inventory side for now. 
       </para>
  </section>
  </section>
  <section id="Installation-Setup_Lab_Controller">
  <title>Setup Lab Controller</title>
  <para>Beaker uses Lab Controllers to manage the Systems in it's inventory.Open a terminal window on the system you will be running the Lab Controller on. This can be a seperate system than the one running the Beaker server. 
  </para>
  <section id="Installation-Setup_Lab_Controller-Install_Lab_Controller">
  <title>Install Lab Controller
  </title>
  <para>If you have not installed the beaker repo on the Lab Controller, see <xref linkend="Installation-Install_Beaker"></xref>. Follow the instruction to install Beaker repo. Install the Lab Controller rpm. These dependencies are needed to make the rpm. 
    <screen>
       $ sudo yum -y install rpm-build python-devel TurboGears
    </screen>
  </para>
  <para>To install the Lab Controller, enter the following. 
    <screen>
       $ sudo yum install beaker-lab-controller
    </screen>
  </para>
  </section>
  <section id="Installation-Setup_Lab_Controller-Configure_Lab_Controller">
  <title>Configure Lab Controller</title>
  <para>Cobbler is one of the dependencies that is installed with the Lab Controller. You'll need to edit the <filename>/etc/cobbler/settings</filename> file. 
    <itemizedlist>
     <listitem>
      <para><option>server</option>: This needs to be set to the Lab Controller's fully qualified domain name. 
      </para>
      </listitem>
      <listitem>
      <para><option>next_server</option>:  If you use cobbler as your dhcp server this needs to be the IP address of the Lab Controller. 
      </para>
      </listitem>
      <listitem>
      <para><option>pxe_just_once</option>: 1
      </para>
      </listitem>
      <listitem>
      <para><option>anamon_enabled</option>: 1
      </para>
      </listitem>
    </itemizedlist>
  </para>
  <para>
    If you wish to support HTTP and FTP installations of distros stored on an 
    NFS server, you will also need to set <option>method_http</option> and 
    <option>method_ftp</option> under <option>mgmt_parameters</option>:
    <programlisting>
mgmt_parameters:
    method_http: "http://download.example.com"
    method_ftp: "ftp://download.example.com"
    </programlisting>
    The HTTP and FTP servers must serve the same directory tree that is 
    available on your NFS server.
  </para>
  <para>You will need to enable an auth method in /etc/cobbler/modules.conf 
  <itemizedlist>
    <listitem>
      <para>Change module = auth_denyall to module = authn_testing 
      </para>
    </listitem>
     <listitem>
      <para>authn_testing gives a login of testing password testing 
      </para>
    </listitem>
     <listitem>
      <para>If you create proper accounts, make sure they match what you entered in <ulink url="http://BeakerServer/labcontrollers/new"></ulink>
      </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>If you are using SELinux, do the following. 
    <screen>
    $ sudo setsebool -P httpd_can_network_connect true
    $ sudo semanage fcontext -a -t public_content_t "/var/lib/tftpboot/.*"
    $ sudo semanage fcontext -a -t public_content_t "/var/www/cobbler/images/.*"
    </screen>
  </para>
  <para>Turn on http 
    <screen>
    $ sudo chkconfig httpd on
    $ sudo service httpd start
    </screen>
  </para>
  <para>Turn on tftp 
    <screen>
    $ sudo chkconfig xinetd on
    $ sudo chkconfig tftp on
    $ sudo service xinetd start
    </screen>
  </para>
  <para>Turn on cobbler 
    <screen>
    $ sudo chkconfig cobblerd on
    $ sudo service cobblerd start
    </screen>
  </para>
  <para>Enable and turn on beaker watchdog proxy
    <screen>
    $ sudo chkconfig beaker-watchdog on
    $ sudo chkconfig beaker-proxy on
    $ sudo service beaker-watchdog start
    $ sudo service beaker-proxy start
    </screen>
  </para>
  <para>Cobbler should now be running. 
  </para>
  <para>You'll need to import some distros. You can use the following command (whilst replacing the variables). 
  <screen>$ cobbler import --path=/net/${NFSSERVER}/${NFSPATH} \ --name=$DISTRONAME \ --available-as=nfs://${NFSSERVER}:/${NFSPATH}</screen>
  </para>
  <para>Beaker/Server needs a little more info than cobbler normally stores about a distro in order to use it. Thats why beaker-lab-controller provides a script in /var/lib/cobbler/triggers/sync/post/osversion.trigger which needs to be run after you import a new distro. It looks up the distros full family.update and looks for any yum repos that may be in the distro path. It also adds the cobbler distros into the Beaker server. 
  <screen>
  $ /var/lib/cobbler/triggers/sync/post/osversion.trigger
  </screen>
  </para>
  <para>Check that the distro was added successfully by going to <ulink url="https://BeakerServer.example.com/bkr/distros"></ulink>.
    <note>
      <para>
        After successfully importing distros, you will need to create server
        side repos to serve the distro specific rpms needed to install lab machines.
        You will need to run the following on the beaker server:
        <screen>
$ beaker-repo-update
        </screen>
      </para>
    </note>
  </para>
  <para>
  You'll need to configure the /etc/beaker/proxy.conf file with the following settings.
  <screen>
  # Hub xml-rpc address.
  HUB_URL = "https://BeakerServer.example.com/bkr"
  #HUB_URL = "http://localhost:8080"
  
  # Hub authentication method. Example: krbv, password, worker_key
  AUTH_METHOD = "password"
  #AUTH_METHOD = "krbv"
  
  # Username and password
  USERNAME = "host/lab.example.com"  # This needs to match the account your created on the Beaker Scheduler
  PASSWORD = "testing"  # Again, only if you are not using kerberos does this need to be set.
  
  # Kerberos service prefix. Example: host, HTTP
  KRB_SERVICE = "HTTP"
  
  # Kerberos realm. If commented, last two parts of domain name are used. Example: MYDOMAIN.COM.
  KRB_REALM = "EXAMPLE.COM"
  </screen>
  </para>
  </section>  
 <section id="Installation-Setup_Lab_Controller-AddDistro_Jobs">
  <title>Automate Jobs for new distros</title>
  <para>
  Whenever we run an the <emphasis>osversion.trigger</emphasis> script(See <xref linkend="Installation-Setup_Lab_Controller-Configure_Lab_Controller"></xref>), we
  have the ability to run automated Jobs on these newly imported distros. To do this we need to install the
  <emphasis>beaker-labcontroller-addDistro</emphasis> package.
  <screen>
    $ yum install beaker-lab-controller-addDistro
  </screen>
  You can now place a script into the <emphasis>/var/lib/beaker/addDistro.d</emphasis> directory, that will be run each time the osversion.trigger script is   called for newly imported distros.
  </para>

  <para>
  By default, <emphasis>/var/lib/beaker/addDistro.d/udpateDistro</emphasis> is installed, which contains the following bash code:-
  <screen>
  #!/bin/sh

  ARCH=$1
  FAMILY=$2
  DISTRO=$3
  VARIANT=$4
  DISTPATH=$5

  if [ "$VARIANT" = "AS" -o \
       "$VARIANT" = "Server" -o \
        "$FAMILY" != "RedHatEnterpriseLinux4" -a \
        "$FAMILY" != "RedHatEnterpriseLinux6" ]; then
        bkr workflow-simple --task /distribution/updateDistro --distro $DISTRO --arch $ARCH --variant "$VARIANT" --whiteboard "Add Distro Test $DISTRO $ARCH"
  fi
  </screen>
  For each newly imported distro this will run the <emphasis>/distribution/updateDistro</emphasis> task. Use this as a guide for creating more specific
  jobs that you might find useful.
  </para>

  </section>
  </section>
  <section id="Installation-Beaker_Client">
    <title>Beaker Client</title>
       <para>
        You'll then need to configure how your Beaker client authenticates with the Beaker server. You can use either password authentication, or kerberos authentication. For password add the following: 
        <screen>
          AUTH_METHOD = "password"
          USERNAME = "username"
          PASSWORD = "password"
        </screen>
      </para>
      <para>
       If instead kerberos authentication is preferred: 
        <screen>
          AUTH_METHOD = "krbv"
          KRB_REALM = "krb_realm"
        </screen>
      </para>
      <para>
        To verify it is working properly: 
        <screen>
          $ bkr list-labcontrollers
        </screen>
      </para>
      <para>
         It should return a list of labcontrollers configured in Beaker. 
      </para>
      <para>
        To create a simple Job workflow, the beaker client comes with the command<command>bkr workflow-simple</command> . This simple Job workflow will create the XML for you from various options passed in a the shell prompt, and submit this to the Beaker server. To see all the options that can be passed to the   <command> workflow-simple,</command> use the following command: 
        <screen>
          $ bkr workflow-simple --help
        </screen>
      </para>
      <para>
        A common set of paramaters that may be passed to the workflow-simple options would be the following:
       <screen>
         $ bkr workflow-simple --username=&lt;user&gt; --password=&lt;passwd&gt; --dryrun
              --arch=&lt;arch&gt; --distro=&lt;distro_name&gt; --task=&lt;task_name&gt;
              --type=&lt;TYPE&gt; --whiteboard=&lt;whiteboard_name&gt; --debug &gt; my_job.xml
        </screen>
      </para>
    <para>
      To submit an existing Job workflow: 
      <screen>
        bkr job-submit job_xml
      </screen>
    </para>
    <para>
      If succesful, you will be shown the Job ID and the progress of your Job. 
    </para>
    <para>
      To watch a Job: 
      <screen>
        $ bkr job-watch J:job_id
      </screen>
    </para>
    <para>
      To cancel a Job you have created: 
      <screen>
       $ bkr job-cancel J:job_id
      </screen>
    </para>
    <para>
      To show all Tasks available for a given distro: 
      <screen>
       $ bkr task-list distro
      </screen>
    </para>
    <para>
      To add a Task: 
      <screen>
        $ bkr task-add task_rpm
      </screen>
    </para>
  </section>
  <section id='Installation-QPID'>
  <title>Integration with QPID</title>
    <section id="Installation-QPID-Introduction">
      <title>Introduction</title>
        <para>
          From version 0.7 onwards Beaker is able to communicate over a QPID message bus. This is only for selected services. So far these are
          the <emphasis>watchdog</emphasis> and the beaker client <emphasis>job-watch</emphasis>. The services that urtilise QPID may be expanded
          in the future. The advantages for using services via QPID are mainly reduced server load and faster response times in a high traffic
          beaker instance.
        </para>

    </section>
    <section id="Installation-QPID-ConfigureBeaker">
      <title>Configuring Beaker</title>
      <para>To use QPID with Beaker there are a few extra settings that need to be configured</para>
      <para>
        Both the server, and the lab controllers will have an <emphasis>/etc/beaker/message_bus.conf</emphasis> file which
        holds information about the QPID broker, exchange names etc. Here is an example.
        <screen>
        topic_exchange=amqp.topic
        headers_exchange=amqp.headers
        service_queue=example-service-queue
        broker=test.hostname.com
        krb_auth=True
        </screen>
      </para>

      <para>
        The config file <emphasis>/etc/beaker/server.cfg</emphasis> on the beaker server also needs a couple more config options
        <screen>
          beaker.qpid_enabled = True
          beaker.qpid_listen_to=['beaker.expired_watchdogs', 'beaker.service_queue']
         </screen>

        In the watchdog config file, <emphasis>/etc/beaker/labcontroller.conf</emphasis> we need to add the following
        <screen>
          QPID_BUS=True
          QPID_LISTEN_TO = ['beaker.watchdog']
        </screen>
        </para>
     </section>
    <section id="Installation-QPID-ConfigureQPID">
    <title>Configuring QPID</title>
    <para>
      Beaker's packages do not contain a qpid broker, you will either have one already, or will need to install one.
      Although each sites QPID broker acls may be different, here is an example of the kind of acls you may need with GSSAPI.
    <screen>
    acl allow beakerd/beaker-server.example.com@EXAMPLE.COM all exchange name=eso.topic
    acl allow beakerd/beaker-server.example.com@EXAMPLE.COM all exchange name=eso.headers
    acl allow beakerd/beaker-server.example.com@EXAMPLE.COM all exchange routingkey=tmp.*
    acl allow beaker-server/beaker-server.example.com@EXAMPLE.COM all exchange name=eso.topic
    acl allow beaker-server/beaker-server.example.com@EXAMPLE.COM all exchange name=eso.headers
    acl allow beaker-watchdog/lab-controller.example.com@EXAMPLE.COM all exchange routingkey=tmp.*
    acl allow all bind all
    acl allow all access all
    acl allow all consume all
    acl allow all create queue name=tmp.*
    </screen>
    </para>

    </section>
    </section>
  </chapter>
  
    
