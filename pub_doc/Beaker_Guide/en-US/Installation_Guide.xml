<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="Installation">
<title>Installation</title>
  <para>
    The installation guide will teach you how to install Beaker into your system.
  </para>
  <section id="Installation-Install_Beaker">
    <title>Install Beaker</title>
      <para>
        To install Beaker packages (and dependencies) you'll need to get the
        repo file then copy it to your <emphasis>/etc/yum.repos.d/</emphasis>
        directory.
      </para>
      <para>
        There are two main repos. One containing packages needed for
        installing the Beaker server and required components, another for packages needed to run the
        Beaker client. Basic tasks needed by Beaker can also be found
        <ulink url="http://repos.fedorapeople.org/repos/beaker/tasks">here</ulink>.
        You can find the repo directory
        <ulink url="http://repos.fedorapeople.org/repos/beaker/">here</ulink>.
        Please download the repo file that suits your requirements.
      </para>

      <para>Install the dependencies.
        <screen>$ yum -y install rpm-build python-devel TurboGears python-TurboMail
$ yum -y install mod_wsgi python-decorator python-tgexpandingformwidget python-xmltramp
        </screen>
      </para>
      <para>Install Beaker server.
        <screen>$ yum install beaker-server </screen>
      </para>
    <section id="Installation-Install_Beaker-Install_DB">
    <title>Install DB</title>
    <para>
    Beaker uses the <ulink url="http://www.sqlalchemy.org/">sqlalchemy</ulink> 
    database library, which supports a large number of databases (including 
    MySQL, PostgreSQL, SQLite, Oracle, and Microsoft SQL Server) provided that 
    a suitable client driver is installed. However Beaker is only tested 
    against MySQL, so it is recommended to use that.
    </para>
    <para>
    For this tutorial, we will use MySQL. First, make sure MySQL server is installed, and configure the daemon to run at startup. 
      <screen>$ yum install -y mysql-server MySQL-python
$ chkconfig mysqld on
      </screen>
    </para>
    <para>
    For Unicode support in Beaker, it is recommended to configure MySQL to store strings as 
    UTF-8. This is controlled by the <literal>character-set-server</literal> option in 
    <filename>/etc/my.cnf</filename>:
      <screen>
[mysqld]
...
character-set-server=utf8
      </screen>
    </para>
    <para>
    Now start the MySQL server:
      <screen>
$ service mysqld start
      </screen>
    </para>
    <para>
      Create a database, and grant access to a user. You can put the
      database on the local machine, or on a remote machine.
    <screen>
$ echo "create database <replaceable>db_name</replaceable>;" | mysql
$ echo "create user <replaceable>user_name</replaceable>;" | mysql
$ echo "grant all on <replaceable>db_name</replaceable>.* to <replaceable>user_name</replaceable> IDENTIFIED BY <replaceable>password</replaceable>;"| mysql
    </screen>
    <note>
      <para>
        You will need to ensure that the details entered for the
        <replaceable>db_name</replaceable>, <replaceable>user_name</replaceable>,
        and <replaceable>password</replaceable> are correctly reproduced
        in the value for the <code>sqlalchemy.dburi</code> key in
        <filename>/etc/beaker/server.cfg</filename>, i.e <code>sqlalchemy.dburi</code>=
        "mysql://<replaceable>user_name</replaceable>:<replaceable>password</replaceable>@<replaceable>hostname</replaceable>/<replaceable>db_name</replaceable>?charset=utf8"
      </para>
    </note>
    </para>
    <para>
    Now let's initialise our DB with tables. We'll also create an admin account called <emphasis>admin</emphasis> with password <emphasis>testing</emphasis>, and email <emphasis>root@localhost</emphasis>. 
    <screen>
    $ beaker-init -u admin -p testing -e root@localhost
    </screen>
    </para>
  </section>
  <section id="Installation-Install_Beaker-Start_Beaker">
    <title>Start Beaker</title>
    <para>We are now ready to start the Beaker service. Make sure you have the following line in your /etc/httpd/conf.d/wsgi.conf and that it is uncommented. 
    <screen>
       LoadModule wsgi_module modules/mod_wsgi.so
</screen>
    </para>
    <para>First make sure apache is on and configured to run on startup. 
      <screen>
      $ sudo chkconfig httpd on
      $ sudo /sbin/service httpd start
      </screen>
    </para>
    <para>We need to switch SELinux off. 
      <screen>
      $ setenforce 0
      </screen>
       </para>
       <para>
       Due to permission issues, we need to delete the log file before we start Beaker for the first time. Otherwise Beaker will not run properly. 
       <screen>
       $ sudo rm /var/log/beaker/server*.log
       $ sudo rm /var/log/beaker/server*.lock
       </screen>
       </para>
       <para>
       Start Beaker and configure it to run on startup. 
       <screen>
       $ sudo chkconfig beakerd on
       $ sudo /sbin/service beakerd start
       </screen>
       </para>
       <para>
       To make sure Beaker is running go to <ulink 
       url="http://BeakerServer.example.com/bkr/"/> in your browser.
       </para>
       <formalpara id="Installation-Add_Lab_Controller">
       <title>Add Lab Controller details</title>
       <para>
       One more step that we need to do is add the Lab Controller that we are 
       yet to configure in <xref linkend="Installation-Setup_Lab_Controller"/>. 
       Log in at <ulink 
       url="http://BeakerServer.example.com/bkr/labcontrollers/new"/>. Use the 
       username and password above from the <command>beaker-init</command> 
       command. The new lab controller form requires the following fields:
        <itemizedlist>
          <listitem>
            <para>
              <application>FQDN</application>: This is the fully qualified domain name of the lab controller. 
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Username</application>: 
                                              This is the login name that the lab controller will use to login to beaker.  
                                              Because this is a machine account we recommend prepending it with host/, so for example host/lab_controller.example.com
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Password</application>: This is the password that goes along with the username, again we will use : <emphasis>testing</emphasis>
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Lab Controller Email Address</application>: All user accounts require a unique email address, you can use root@FQDN of lab controller.
            </para>
          </listitem>
        </itemizedlist>
       </para>
       </formalpara>
       <para>Save the form and we are done with the Inventory side for now. 
       </para>
  </section>
  </section>
  <section id="Installation-Setup_Lab_Controller">
  <title>Setup Lab Controller</title>
  <para>Beaker uses Lab Controllers to manage the Systems in it's inventory.Open a terminal window on the system you will be running the Lab Controller on. This can be a seperate system than the one running the Beaker server. 
  </para>
  <section id="Installation-Setup_Lab_Controller-Install_Lab_Controller">
  <title>Install Lab Controller
  </title>
  <para>If you have not installed the beaker repo on the Lab Controller, see <xref linkend="Installation-Install_Beaker"></xref>. Follow the instruction to install Beaker repo. Then install the lab controller package: 
    <screen>
$ sudo yum install beaker-lab-controller
    </screen>
  </para>
  </section>
  <section id="Installation-Setup_Lab_Controller-Configure_Lab_Controller">
  <title>Configure Lab Controller</title>
  <para>Settings for the lab controller daemons are in 
  <filename>/etc/beaker/labcontroller.conf</filename>. At a minimum you will 
  need to change the following settings:
  <itemizedlist>
    <listitem>
      <para><option>HUB_URL</option>: The URL of your Beaker server 
      <emphasis>without the trailing slash</emphasis>. If the lab controller and 
      server are the same machine then the default value 
      <literal>http://localhost/bkr</literal> is adequate.</para>
    </listitem>
    <listitem>
      <para><option>USERNAME</option>, <option>PASSWORD</option>: The username 
      and password which the lab controller will use when logging in to Beaker. 
      This is the username and password you picked when creating the lab 
      controller in <xref linkend="Installation-Add_Lab_Controller"/>.
      </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>Turn on httpd:
    <screen>
$ sudo chkconfig httpd on
$ sudo service httpd start
    </screen>
  </para>
  <para>Turn on tftp:
    <screen>
$ sudo chkconfig xinetd on
$ sudo chkconfig tftp on
$ sudo service xinetd start
    </screen>
    You can also use <package>dnsmasq</package> or any other TFTP server 
    implementation. If your TFTP server is configured to use a root directory 
    other than the default
    <filename class="directory">/var/lib/tftpboot</filename>
    you will need to set the <option>TFTP_ROOT</option> option in 
    <filename>/etc/beaker/labcontroller.conf</filename>.
  </para>
  <para>The <systemitem class="daemon">beaker-proxy</systemitem> daemon handles 
  XML-RPC requests from within the lab and proxies them to the server.
    <screen>
$ sudo chkconfig beaker-proxy on
$ sudo service beaker-proxy start
    </screen>
  </para>
  <para>The <systemitem class="daemon">beaker-watchdog</systemitem> daemon 
  monitors systems and aborts their recipes if they panic or exceed the time 
  limit.
    <screen>
$ sudo chkconfig beaker-watchdog on
$ sudo service beaker-watchdog start
    </screen>
  </para>
  <para>The <systemitem class="daemon">beaker-provision</systemitem> daemon 
  writes netboot configuration files in the TFTP root directory and runs fence 
  commands to reboot systems.
    <screen>
$ sudo chkconfig beaker-provision on
$ sudo service beaker-provision start
    </screen>
  </para>
</section>
<section id="Installation-Import_Distros">
  <title>Import Distros</title>
  <para>The next step is to import some distros using the 
  <command>beaker-import</command> command on the lab controller. For each 
  distro you would like to make available in Beaker, run 
  <command>beaker-import</command> and pass all the URLs under which the distro 
  is available. For example:
    <screen>
$ beaker-import http://mymirror.example.com/pub/fedora/linux/releases/17/Fedora/ \
        ftp://mymirror.example.com/pub/fedora/linux/releases/17/Fedora/ \
        nfs://mymirror.example.com:/pub/fedora/linux/releases/17/Fedora/
    </screen>
  Check that the distros were added successfully by going to <ulink 
  url="https://BeakerServer.example.com/bkr/distros"></ulink>.</para>
  <note>
    <para>
      After successfully importing distros, you will need to create server
      side repos to serve the distro specific rpms needed to install lab machines.
      You will need to run the following on the beaker server:
      <screen>
$ beaker-repo-update
      </screen>
    </para>
  </note>
</section>  
<section id="Installation-Setup_Lab_Controller-AddDistro_Jobs">
  <title>Automate Jobs for New Distros</title>
  <para>Whenever we run the <command>beaker-import</command> command (see <xref 
  linkend="Installation-Import_Distros"></xref>), we have the ability to run 
  automated jobs on these newly imported distros. To do this we need to install 
  the <package>beaker-lab-controller-addDistro</package> package.
  <screen>
$ sudo yum install beaker-lab-controller-addDistro
  </screen>
  You can now place a script into the <filename 
  class="directory">/var/lib/beaker/addDistro.d</filename> directory, that will 
  be run each time a distro is imported.</para>
  <para>By default, 
  <filename>/var/lib/beaker/addDistro.d/updateDistro</filename> is installed, 
  which schedules a Beaker job to test installation of the new distro and tags 
  it with <literal>STABLE</literal> if the job completes without error. Use 
  this as a guide for creating more specific jobs that you might find 
  useful.</para>
</section>

<section id="Installation-Lab_PXE_Menu">

<title>Configure Lab PXE Menu</title>

<para>Beaker includes a command, <command>beaker-pxemenu</command>, which can
optionally be used to generate a PXE boot menu containing the distros in
Beaker. Users in the lab can then perform manual installations by selecting a
distro from the menu. The menu is written to
<filename>pxelinux.cfg/beaker_menu</filename> in the TFTP root
directory.</para>

<para>You can limit the menu to only contain distros tagged in Beaker with a
certain tag, by passing the <option>--tag</option> option to
<command>beaker-pxemenu</command>. By default, all distros which are available
in the lab are included in the PXE menu.</para>

<note><para>If you have configured a non-default TFTP root directory in
<filename>/etc/beaker/labcontroller.conf</filename>, be sure to pass that same
directory in the <option>--tftp-root</option> option to
<command>beaker-pxemenu</command>.</para></note>

<para>If using the PXE menu, you should configure
<filename>pxelinux.cfg/default</filename> to boot from local disk by default,
with an option to load the menu. For example:

<programlisting>
default local
prompt 1
timeout 200

say ***********************************************
say Press ENTER to boot from local disk
say Type "menu" at boot prompt to view install menu
say ***********************************************

label local
    localboot 0

label menu
    kernel menu.c32
    append pxelinux.cfg/beaker_menu
</programlisting>
</para>

<para>If your site imports distros into Beaker infrequently, you may prefer to
run <command>beaker-pxemenu</command> after importing new distros.
Otherwise, you can create a cron job to periodically update the PXE menu:

<programlisting>
#!/bin/sh
exec beaker-pxemenu --quiet
</programlisting>
</para>

</section>

  </section>
  <section id="Installation-Beaker_Client">
    <title>Beaker Client</title>
       <para>
        You'll then need to configure how your Beaker client authenticates with the Beaker server. You can use either password authentication, or kerberos authentication. For password add the following: 
        <screen>
          AUTH_METHOD = "password"
          USERNAME = "username"
          PASSWORD = "password"
        </screen>
      </para>
      <para>
       If instead kerberos authentication is preferred: 
        <screen>
          AUTH_METHOD = "krbv"
          KRB_REALM = "krb_realm"
        </screen>
      </para>
      <para>
        To verify it is working properly: 
        <screen>
          $ bkr list-labcontrollers
        </screen>
      </para>
      <para>
         It should return a list of labcontrollers configured in Beaker. 
      </para>
      <para>
        To create a simple Job workflow, the beaker client comes with the command <command>bkr workflow-simple</command> . This simple Job workflow will create the XML for you from various options passed at the shell prompt, and submit this to the Beaker server. To see all the options that can be passed during invocation of <command>workflow-simple</command>, use the following command: 
        <screen>
          $ bkr workflow-simple --help
        </screen>
      </para>
      <para>
        A common set of paramaters that may be passed to the workflow-simple options would be the following:
       <screen>
         $ bkr workflow-simple --username=&lt;user&gt; --password=&lt;passwd&gt; --dryrun
              --arch=&lt;arch&gt; --distro=&lt;distro_name&gt; --task=&lt;task_name&gt;
              --type=&lt;TYPE&gt; --whiteboard=&lt;whiteboard_name&gt; --debug &gt; my_job.xml
        </screen>
      </para>
    <para>
      To submit an existing Job workflow: 
      <screen>
        bkr job-submit job_xml
      </screen>
    </para>
    <para>
      If succesful, you will be shown the Job ID and the progress of your Job. 
    </para>
    <para>
      To watch a Job: 
      <screen>
        $ bkr job-watch J:job_id
      </screen>
    </para>
    <para>
      To cancel a Job you have created: 
      <screen>
       $ bkr job-cancel J:job_id
      </screen>
    </para>
    <para>
      To show all Tasks available for a given distro: 
      <screen>
       $ bkr task-list distro
      </screen>
    </para>
    <para>
      To add a Task: 
      <screen>
        $ bkr task-add task_rpm
      </screen>
    </para>
  </section>
  </chapter>
  
<!-- vim: set sw=2 : -->
