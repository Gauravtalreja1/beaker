<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "beaker_user_guide.ent">
%BOOK_ENTITIES;
]>
<section id="chap-beaker_user_guide-Components-Jobs">
	<title>Jobs</title> 
	<para>
		The purpose of a Job is to provide an encapsulation of Tasks. It is to provide a single point of submission of these Tasks, and a single point of reviewing the output and results of these Tasks. The Tasks within a Job may or may not be related to each other; although it would make sense to define Jobs based on the relationship of the Tasks within it. Once a Job has been submitted you can not alter its contents, or pause it. You can however cancel it (<xref linkend="sect-beaker_user_guide-Components-Jobs-Job_Submission-Job_Results" />), and alter its Recipe Set's priorities (you can only lower the priority level if you are not in the admin group). Adjusting this priority upwards will change which Recipe Set is run sooner, and vice a versa.
	</para> 
	<section id="sect-beaker_user_guide-Components-Jobs-Job_Workflow">
		<title>Job Workflow</title>
		<para>
			To create a simple Job workflow, see the <literal>bkr workflow-simple</literal> command in <xref linkend="chap-beaker_user_guide-CLI" />
		</para>
	
	</section>
	<section id="sect-beaker_user_guide-Components-Jobs-Job_Searching">
		<title>Job Searching</title>
		<para>
			To search for a Job, navigate to <guimenu>Scheduler</guimenu>&gt;<guimenuitem>Jobs</guimenuitem> at the top of the page. To look up the <literal>Job ID</literal>, enter a number in the search box and press the <literal>Lookup ID</literal> button. Please see <xref linkend="sect-beaker_user_guide-Components-Systems-System_Searching" /> for details on searching. 
			<note>
				<title>Quick Searches</title>
				<para>
					By pressing the <literal>Running</literal>,<literal>Queued</literal>, or <literal>Completed</literal> buttons you can quickly display Recipes that have a status of running,queued, and completed respectively.
				</para>
			</note>
		</para>
	</section>
	
	<section id="sect-beaker_user_guide-Components-Jobs-Job_Submission">
		<title>Job Submission</title>
		<para>
			There are two ways of submitting a Job through the web app.They are outlined below.
		</para>
		<section id="sect-beaker_user_guide-Components-Jobs-Job_Submission-New_Job">	
                  <title>Submitting a new Job</title>
                  <para>
                   Once you have created an XML Job workflow, you able able to submit it as a new Job. To do this, go to the <guimenu>Scheduler</guimenu>&gt;
                   <guimenuitem>New Job</guimenuitem>. Click <literal>Browse</literal> to select your XML file, and then hit the <literal>Submit Data</literal> button.
                   The next page shown gives you an opportunity to check/edit your XML before queueing it as a Job by pressing the <literal>Queue</literal> button. 
                  </para>
                </section>

		<section id="sect-beaker_user_guide-Components-Jobs-Job_Submission-Cloning_an_existing_Job">
			<title>Cloning an existing Job</title>
			<para>
				Cloning a Job means to take a Job that has already been run on the System, and re-submit it. To do this you first need to be on the Job search page. See <xref linkend="sect-beaker_user_guide-Components-Jobs-Job_Searching" />.
			</para>
			<figure><title>Cloning a Job</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="./images/job_submit_clone.png" format="PNG" width="444" />
					</imageobject>
				</mediaobject>
			</figure>
			<para>
				Clicking on <literal>Clone</literal> under the <literal>Action</literal> column will take you to a page that shows the structure of the Job in the XML.
			</para>
			<note>
				<title>Submitting a slightly different Job</title>
				<para>
					If you want to submit a Job that's very similar to a Job already in Beaker,you can use the <literal>Clone</literal> button to change details of a previous Job and resubmit it!
				</para>
			</note>
		</section>
		<section id="sect-beaker_user_guide-Components-Jobs-Job_Submission-XML_details">
		<title>Job workflow details</title>
		<para>
		There are various XML entities in a Job workflow. You may wish to look at what some of these may be by looking at <xref linkend="sect-beaker_user_guide-Components-Jobs-Job_Submission-Cloning_an_existing_Job" />
		Each Job has a root node called the <literal>job</literal> element:
		<screen>
&lt;job&gt;
&lt;/job&gt;
		</screen>
		A direct child is the <literal>whiteboard</literal>. The content is normally a mnemonic piece of text describing the Job:
		<screen>

&lt;job&gt;
&lt;whiteboard&gt;
	Apache 2.2 test
&lt;/whiteboard&gt;
&lt;/job&gt;
		</screen> 
		The next tag in the <literal>recipeSet</literal> tag (which describes a Recipe Set. 
		See <xref linkend="chap-beaker_user_guide-Components-Recipes" /> for details). A Job workflow can have one or more <literal>recipeSet</literal>. 
		All Recipes within a Recipe Set are run simultaneously, whereas multiple Recipe Sets are run in no predetermined order. This should help you decide
		whether you wish to run tasks in one or many Recipe Set (i.e Multihost tests will require no more than one Recipe Set).
		<screen>
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		Of course a <literal>recipeSet</literal> element needs one or more <literal>recipe</literal> children. As mentioned above, Recipes run simultaneously.
		The <literal>recipeSet</literal> element can have the following attributes
		<variablelist>
			<varlistentry><term>kernel_options</term>
				<listitem>
					<para>
					</para>
				</listitem>
			</varlistentry>

			<varlistentry><term>kernel_options_post</term>
				<listitem>
					<para>
					</para>
				</listitem>
			</varlistentry>

			<varlistentry><term>ks_meta</term>
				<listitem>
					<para>
					</para>
				</listitem>
			</varlistentry>

			<varlistentry><term>role</term>
				<listitem>
					<para>
					In a Multihost environment, it could be either <literal>SERVERS</literal>, <literal>CLIENT</literal> or <literal>STANDALONE</literal>.
					If it is not important, it can be <literal>None</literal>.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry><term>whiteboard</term>
				<listitem>
					<para>
						Text that describes the Recipe
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		Here is an example:
		<screen>	
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		<note><title>Avoid having many Recipes in one Recipe Set</title>
		<para>
			Because Recipes are run simultaneously, not one Recipe will commence until all other sibling Recipes are ready. This involves each Recipe 
			reserving a machine, and waiting until every other Recipe has reserved a machine. This can tie up resources and keep them idle for long amounts of time.
			Try having many Recipe Sets containing few Recipes, rather than the opposite. Of course this only applies to Recipes that do not need to be run
			simultaneously (i.e not Multihost Jobs)
		</para>
		</note>
		Within the <literal>recipe</literal> tag, you can specify what packages need to be installed on top of anything that comes installed by default.
		<screen>

&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
	&lt;packages&gt;
	  &lt;package name="emacs"/&gt;
	  &lt;package name="vim-enhanced"/&gt;
          &lt;package name="unifdef"/&gt;
	  &lt;package name="mysql-server"/&gt;
	  &lt;package name="MySQL-python"/&gt;
	  &lt;package name="python-twill"/&gt;
			&lt;/packages&gt;
      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		If you would like you can also specify your own repository that provides extra packages that your Job requires. Use the <literal>repo</literal> tag for this.
		You can use any text you like for the name attribute.
		<screen>
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
	&lt;packages&gt;
	  &lt;package name="emacs"/&gt;
	  &lt;package name="vim-enhanced"/&gt;
          &lt;package name="unifdef"/&gt;
	  &lt;package name="mysql-server"/&gt;
	  &lt;package name="MySQL-python"/&gt;
	  &lt;package name="python-twill"/&gt;
	&lt;/packages&gt;

	&lt;repos&gt;
	  &lt;repo name="myrepo_1" url="http://my-repo.com/tools/beaker/devel/"/&gt;
	&lt;/repos&gt;

      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>		
		To actually determine what distro will be installed, the <literal>distroRequires</literal> element needs to be populated. Within, we can specify such elements
		as <literal>distro_arch</literal>, <literal>distro_name</literal> and <literal>distro_method</literal>. This relates to the Distro architecture, the name of the 
		Distro, and it's install method (i.e nfs,ftp etc) respectively. The <literal>op</literal> determines if we do or do not want this value i.e <literal>=</literal> 
		means we do want that value, <literal>!=</literal> means we do not want that value. The <literal>distro_virt</literal> element will determine whether we install
		on a virtual machine or not.
		<screen>
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
	&lt;packages&gt;
	  &lt;package name="emacs"/&gt;
	  &lt;package name="vim-enhanced"/&gt;
          &lt;package name="unifdef"/&gt;
	  &lt;package name="mysql-server"/&gt;
	  &lt;package name="MySQL-python"/&gt;
	  &lt;package name="python-twill"/&gt;
	&lt;/packages&gt;

	&lt;repos&gt;
	  &lt;repo name="myrepo_1" url="http://my-repo.com/tools/beaker/devel/"/&gt;
	&lt;/repos&gt;
	&lt;distroRequires&gt;
  	  &lt;and&gt;
	    &lt;distro_arch op="=" value="x86_64"/&gt;
	    &lt;distro_name op="=" value="RHEL5-Server-U4"/&gt;
	    &lt;distro_method op="=" value="nfs"/&gt;
	  &lt;/and&gt;
	  &lt;distro_virt op="=" value=""/&gt;
        &lt;/distroRequires&gt;
      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		<literal>hostRequires</literal> has similar attributes to <literal>distroRequires</literal>
		<screen>
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
	&lt;packages&gt;
	  &lt;package name="emacs"/&gt;
	  &lt;package name="vim-enhanced"/&gt;
          &lt;package name="unifdef"/&gt;
	  &lt;package name="mysql-server"/&gt;
	  &lt;package name="MySQL-python"/&gt;
	  &lt;package name="python-twill"/&gt;
	&lt;/packages&gt;
	&lt;repos&gt;
	  &lt;repo name="myrepo_1" url="http://my-repo.com/tools/beaker/devel/"/&gt;
	&lt;/repos&gt;
	&lt;distroRequires&gt;
  	  &lt;and&gt;
	    &lt;distro_arch op="=" value="x86_64"/&gt;
	    &lt;distro_name op="=" value="RHEL5-Server-U4"/&gt;
	    &lt;distro_method op="=" value="nfs"/&gt;
	  &lt;/and&gt;
	  &lt;distro_virt op="=" value=""/&gt;
        &lt;/distroRequires&gt;
	&lt;hostRequires&gt;
	  &lt;and&gt;
	    &lt;arch op="=" value="x86_64"/&gt;
	  &lt;/and&gt;
	&lt;/hostRequires&gt;
      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		All that's left to populate our XML with, are the <literal>task</literal> elements. The two attributes we need to specify
		are the <literal>name</literal> and the <literal>role</literal>. Details of how to find which Task's are available, see <xref linkend="sect-beaker_user_guide-Components-Tasks-Task_Searching" />. Also note that we've added in a <literal>param</literal> as a descendant of <literal>task</literal>. The <literal>value</literal> of this will be
		assigned to a new environment variable specified by <literal>name</literal>. 
		<screen>
&lt;job&gt;
  &lt;whiteboard&gt;
    Apache 2.2 test
  &lt;/whiteboard&gt;
    &lt;recipeSet&gt;
      &lt;recipe kernel_options="" kernel_options_post="" ks_meta="" role="None" whiteboard="Lab Controller"&gt;
	&lt;packages&gt;
	  &lt;package name="emacs"/&gt;
	  &lt;package name="vim-enhanced"/&gt;
          &lt;package name="unifdef"/&gt;
	  &lt;package name="mysql-server"/&gt;
	  &lt;package name="MySQL-python"/&gt;
	  &lt;package name="python-twill"/&gt;
	&lt;/packages&gt;

	&lt;repos&gt;
	  &lt;repo name="myrepo_1" url="http://my-repo.com/tools/beaker/devel/"/&gt;
	&lt;/repos&gt;
	&lt;distroRequires&gt;
  	  &lt;and&gt;
	    &lt;distro_arch op="=" value="x86_64"/&gt;
	    &lt;distro_name op="=" value="RHEL5-Server-U4"/&gt;
	    &lt;distro_method op="=" value="nfs"/&gt;
	  &lt;/and&gt;
	  &lt;distro_virt op="=" value=""/&gt;
        &lt;/distroRequires&gt;

	&lt;task name="/distribution/install" role="STANDALONE"&gt;
	  &lt;params&gt;
		&lt;param name="My_ENV_VAR" value="foo"/&gt;
	  &lt;params/&gt;
	&lt;/task&gt;

      &lt;/recipe&gt;
    &lt;/recipeSet&gt;
&lt;/job&gt;
		</screen>
		</para>
		</section>
		<section id="sect-beaker_user_guide-Components-Jobs-Job_Submission-Job_Results">
			<title>Job Results</title>
			<para>
				The whole purpose of Jobs is to view the output of the Job, and more to the point, Tasks that ran within the Job. To do this, you must first go to the Job search screen (<xref linkend="sect-beaker_user_guide-Components-Jobs-Job_Searching" />). After finding the Job you want to see the results of, click on the link in the <literal>ID</literal> column.You don't have to wait until the Job has completed to view the results. Of course only
				the results of those Tasks that have already finished running will be available.
			</para>
			<para>
				The Job results page is divided by <literal>Recipe Set</literal>. To show the results of each Recipe within these Recipe Sets, click the 
                                <literal>Show All Results</literal> button. You can just show the tasks that have a status of <literal>Fail</literal> by clicking 
                                <literal>Show Failed Results</literal>.
			</para>
			<para> 
				While your Job is still <literal>Queued</literal> it's possible to change the priority. You can change the priority of individual Recipe Sets by changing the value of <literal>Priority</literal>, or you can change all the Job's Recipe Sets at once by clicking an option beside the text <literal>Set all RecipeSet priorities</literal>, which is at the top right of the page. If successful, a green success message will briefly display, otherwise a red error message will be shown.
			</para>
			<note><title>Priority permissions</title>
				<para>
					If you are not an Admin you will only be able to lower the priority. Admins can lower and raise the priority
				</para>
			</note>
			<figure><title>Changing the priority of a Job's Recipe Set</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="./images/job_priority_change.png" format="PNG" width="444" />
					</imageobject>
				</mediaobject>
			</figure>
				
			
			<para>
			
				<variablelist><title>Result Details</title>
                                	<varlistentry><term>Run</term>
						<listitem>
							<para>
								This is the <literal>ID</literal> of the instance of the particular Task.
							</para>
						</listitem>
                                        </varlistentry>
                                        <varlistentry><term>Task</term>
						<listitem>
							<para>
							         A Task which is part of our current Job.
							</para>
						</listitem>
                                        </varlistentry>
 					<varlistentry><term>Start</term>
						<listitem>
							<para>
								The time at which the Task commenced.
							</para>
						</listitem>
					</varlistentry>
 					<varlistentry><term>Finish</term>
						<listitem>
							<para>
								The time at which the Task completed.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry><term>Duration</term>
						<listitem>
							<para>
								Time the Task took to run.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry><term>Logs</term>
						<listitem>
							<para>
								This is a listing of all the output logs generated during the running of this Task.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry><term>Status</term>
						<listitem>
							<para>
								This is the current Status of the Task. <literal>Aborted</literal>,<literal>Cancelled</literal> and <literal>Completed</literal> mean that the Task has finished running.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry><term>Action</term>
						<listitem>
							<para>
								 The two options here are <literal>Cancel</literal> and <literal>Clone</literal>.See <xref linkend="sect-beaker_user_guide-Components-Jobs-Job_Submission-Cloning_an_existing_Job" /> to learn about Cloning.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				<note>
					<title>Viewing Job results at a glance</title>
					<para>
						If you would to be able to look at the <literal>Result</literal> of all Tasks within a particular Job, try the 
                                                <literal>Matrix Report</literal>, See <xref linkend="sect-beaker_user_guide-Reports-Matrix_Report" />.
					</para>
				</note>
			</para>
		</section>

	</section>

</section>

