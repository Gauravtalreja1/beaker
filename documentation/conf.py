
extensions = ['sphinx.ext.autodoc', 'sphinx.ext.intersphinx', 'sphinx.ext.todo',
    'sphinxcontrib.httpdomain']
master_doc = 'index'
project = u'Beaker'
copyright = u'2013, Red Hat, Inc'

try:
    import bkr
    version = bkr.__version__
except ImportError:
    version = "dev"
release = version

html_title = 'Beaker'
html_use_index = False
html_domain_indices = False

# subcommands are automatically generated, see extension below
man_pages = [
    ('man/bkr', 'bkr', 'Beaker client',
        [u'The Beaker team <beaker-devel@lists.fedorahosted.org>'], 1),
    ('man/bkr-workflow-xslt', 'bkr-workflow-xslt', 'XSLT-based Beaker job generator',
        [u'David Sommerseth <davids@redhat.com>'], 1),
    ('man/beaker-wizard', 'beaker-wizard', 'Tool to ease the creation of a new Beaker task',
        [u'Petr Splichal <psplicha@redhat.com>'], 1),
]
man_show_urls = True

latex_documents = [
  ('admin-guide/index', 'admin-guide.tex', u'Beaker Administration Guide',
   u'Red Hat, Inc.', 'manual'),
  ('user-guide/index', 'user-guide.tex', u'Beaker User Guide',
   u'Red Hat, Inc.', 'manual'),
]

intersphinx_mapping = {'http://docs.python.org/': None,
                       'http://beaker-project.org/dev': None,
                      }

# This config is also a Sphinx extension with some Beaker-specific customisations:

import os
import re
import docutils.core

def strip_decorator_args(app, what, name, obj, options, signature, return_annotation):
    """
    Sphinx handler for autodoc-process-signature event, to strip out the weird 
    arguments which appear on functions decorated by TurboGears.
    """
    if what in ('function', 'method'):
        assert signature.startswith('(')
        assert signature.endswith(')')
        args = [arg.strip() for arg in signature[1:-1].split(',')]
        fixed_args = [arg for arg in args if arg not in
                ('*_decorator__varargs', '**_decorator__kwargs')]
        fixed_signature = '(%s)' % ', '.join(fixed_args)
        return (fixed_signature, return_annotation)

def generate_client_subcommand_docs(app):
    """
    Finds Beaker client subcommand modules matching bkr.client.commands.cmd_* 
    and creates a Sphinx document for each one.
    """
    from bkr.client import BeakerCommand
    from bkr.client.main import BeakerCommandContainer
    import bkr.client.commands
    for module_name in dir(bkr.client.commands):
        if module_name.startswith('cmd_'):
            module = getattr(bkr.client.commands, module_name)
            if not module.__doc__:
                continue
            for item in module.__dict__.values():
                if isinstance(item, type) and issubclass(item, BeakerCommand) and item.enabled:
                    generate_client_subcommand_doc(app, module, item)

def generate_client_subcommand_doc(app, module, cls):
    from bkr.client.main import BeakerCommandContainer
    docname = 'bkr-%s' % BeakerCommandContainer.normalize_name(cls.__name__)
    doc = module.__doc__
    doctitle = doc.splitlines()[1] # XXX dodgy, parse doc instead
    doc = '.. GENERATED FROM %s, DO NOT EDIT THIS FILE\n%s' % (module.__file__, doc)
    outpath = os.path.join(app.srcdir, 'man', '%s.rst' % docname)
    # only write it if the contents have changed, this helps conditional builds
    if not os.path.exists(outpath) or open(outpath, 'r').read() != doc:
        with open(outpath, 'w') as f:
            f.write(doc)
    description = doctitle.partition(': ')[2]
    app.config.man_pages.append(('man/%s' % docname, docname, description,
            [u'The Beaker team <beaker-devel@lists.fedorahosted.org>'], 1))

def setup(app):
    app.setup_extension('sphinx.ext.autodoc')
    app.connect('autodoc-process-signature', strip_decorator_args)
    app.connect('builder-inited', generate_client_subcommand_docs)
