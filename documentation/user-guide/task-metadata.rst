Task metadata
=============

This section describes the metadata which must be defined in each Beaker task. 
The beaker-wizard utility will help you to populate this metadata correctly 
when creating a new task (see :doc:`An example task <example-task>`). A sample 
Makefile is also included in the ``rhts-devel`` package as 
``/usr/share/doc/rhts-devel-*/Makefile.template``.

.. _makefile-variables:

Makefile variables
~~~~~~~~~~~~~~~~~~

The following environment variables must be exported in the task's Makefile. 
These variables are used by ``rhts-make.include`` and its ancillary scripts 
when building the task RPM.

``TEST``
    The name of the task. The name is a hierarchical path beginning with 
    a slash (``/``), similar to a filesystem path. For example, 
    ``/distribution/mypackage/test-suite``. The task name is available as 
    :envvar:`TEST` in the task's environment.

    The task name is prefixed with ``/mnt/tests`` to form the directory where 
    it will be installed on the system under test. This directory is available 
    as :envvar:`TESTPATH`.

    The task should report results relative to its name (see 
    :ref:`rhts-report-result`).

``TESTVERSION``
    The version of the task. This becomes the version of the task RPM when it 
    is built. As a consequence, it may contain only numbers, digits, and period 
    (``.``).

``FILES``
    A whitespace-separated list of all the files to be included in the task 
    RPM. This must include at least ``testinfo.desc`` (typically given as 
    ``$(METADATA)``), ``runtest.sh``, and ``Makefile``. If a task uses any 
    additional scripts or data, those files must be listed here.

``BUILT_FILES``
    Files which are generated or compiled by other rules in the Makefile should 
    be listed in this variable, rather than in ``FILES``, so that they are 
    built when the task RPM is built.

.. _testinfo.desc:

Fields in ``testinfo.desc``
~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``testinfo.desc`` file declares metadata about the task. The metadata is 
extracted by Beaker and made available in the task library. The harness also 
uses this metadata, for example to determine the allowed watchdog time for the 
task.

This file is typically generated by the Makefile as part of the build process, 
although it can also be edited and committed directly to source control.

The following fields are recognised by Beaker.

Owner
-----

Owner: (optional) is the person responsible for this test. Initially for
Beaker, this will be whoever committed the test to Subversion. A naming
policy may have to be introduced as the project develops. Acceptable
values are a subset of the set of valid email addresses, requiring the
form: "Owner: human readable name <username@domain>".

Name
----

``Name``:(required) It is assumed that any result-reporting framework
will organize all available tests into a hierarchical namespace, using
forward-slashes to separate names (analogous to a path). This field
specifies the namespace where the test will appear in the framework, and
serves as a unique ID for the test. Tests should be grouped logically by
the package under test. This name should be consistent with the name
used in source control too. Since some implementations will want to use
the file system to store results, make sure to only use characters that
are usable within a file system path.

Description
-----------

``Description``\ (required) must contain exactly one string.

For example:

::

    Description: This test tries to map five 1-gigabyte files with a single process.
    Description: This test tries to exploit the recent security issue for large pix map files.
    Description: This test tries to panic the kernel by creating thousands of processes.

.. _testinfo-testtime:

TestTime
--------

Every ``Makefile`` must contain exactly one ``TestTime`` value. It
represent the upper limit of time that the ``runtest.sh`` script should
execute before being terminated. That is, the API should automatically
fail the test after this time period has expired. This is to guard
against cases where a test has entered an infinite loop or caused a
system to hang. This field can be used to achieve better test lab
utilization by preventing the test from running on a system
indefinitely.

The value of the field should be a number followed by either the letter
"m" or "h" to express the time in minutes or hours. It can also be
specified it in seconds by giving just a number. It is recommended to
provide a value in minutes, for readability.

The time should be the absolute longest a test is expected to take on
the slowest platform supported, plus a 10% margin of error. It is
usually meaningless to have a test time of less than a minute, since
some implementations of the API may be attempting to communicate with a
busy server such as writing back to an NFS share or performing an
XML-RPC call.

For example:

::

    TestTime: 90   # 90 seconds
    TestTime: 1m   # 1 minute
    TestTime: 2h   # 2 hours

Requires
--------

``Requires`` one or more. This field indicates the packages that are
required to be installed on the test machine for the test to work. The
package being tested is automatically included via the ``PACKAGE_NAME``
variable. Anything ``runtest.sh`` needs for execution must be included
here.

This field can occur multiple times within the metadata. Each value
should be a space-separated list of package names, or of Kickstart
package group names preceded with an @ sign. Each package or group must
occur within the distribution tree under test (specifically, it must
appear in the ``comps.xml`` file).

For example::

    Requires: gdb
    Requires: @legacy-software-development
    Requires: @kde-software-development
    Requires: -pdksh

The last example above shows that we don't want a particular package
installed for this test. Normally you shouldn't have to do this unless
the package is installed by default.

In a lab implementation, the dependencies of the packages listed can be
automatically loaded using yum.

Note that unlike an RPM spec file, the names of packages are used rather
than Provides: dependencies. If one of the dependencies changes name
between releases, one of these approaches below may be helpful:

-  for major changes, split the test, so that each release is a separate
   test in a sub-directory, with the common files built from a shared
   directory in the ``Makefile``.

-  if only a dependency has changed name, specify the union of the names
   of dependencies in the Requires: field; an implementation should
   silently ignore unsolvable dependencies.

-  it may be possible to work around the differences by logic in the
   section of the ``Makefile`` that generates the ``testinfo.desc``
   file.

When writing a multihost test involving multiple roles client(s) and
server(s), the union of the requirements for all of the roles must be
listed here.

Provides
--------

This field allows the task creator to specify the capabilities that
the task RPM provides upon install. In addition to the default
``Provides`` generated by RPM, every task provides a virtual
capability derived from the task name. For example, the
``/distribution/install`` task also provides ``test(/distribution/install)``.

You can specify additional capabilities by adding new ``Provides``
lines (using a similar syntax to ``Requires``). For example, if your
task provides equivalent or better functionality than an old task, you
can add a ``Provides`` such as the one below::

    Provides: test(/old/task/name)

RhtsRequires
------------

This field indicates the other beaker tests that are required to be
installed on the test machine for the test to work.

This field can occur multiple times within the metadata. Each value
should be a space-separated list of its task name enclosed in test().
Each task must exist on the Beaker Scheduler.

For example::

    RhtsRequires: test(/distribution/rhts/common)

RunFor
------

``RunFor`` allows for the specification of the packages which are
relevant for the test. This field is the hook to be used for locating
tests by package. For example, when running all tests relating to a
particular package[1], an implementation should use this field.
Similarly, when looking for results on a particular package, this is the
field that should be used to locate the relevant test runs.

When testing a specific package, that package must be listed in this
field. If the test might reasonably be affected by changes to another
package, the other package should be listed here. If a package changes
name in the various releases of the distribution, all its names should
be listed here.

This field is optional; and can occur multiple times within the
metadata. The value should be a space-separated list of package names.

.. _testinfo-releases:

Releases
--------

Some tests are only applicable to certain distribution releases. For
example, a kernel bug may only be applicable to RHEL3 which contains the
2.4 kernel. Limiting the release should only be used when a test will
not execute on a particular release. Otherwise, the release should not
be restricted so that your test can run on as many different releases as
possible.

You can populate the ``Releases`` field in two different ways. To exclude 
certain releases but include all others, list the releases each prefixed with 
a minus sign (-). To include certain releases but exclude all others, list the 
included releases.

For example, if your test runs only on RHEL3 and RHEL4::

    Releases: RedHatEnterpriseLinux3 RedHatEnterpriseLinux4

Or, if your test is expected to run on any release except for RHEL3::

    Releases: -RedHatEnterpriseLinux3

Releases are identified by their OS major version. You can browse a list of OS 
versions in Beaker by selecting :menuselection:`Distros --> Family` from the 
menu. For example:

-  RedHatEnterpriseLinux3
-  RedHatEnterpriseLinux4
-  RedHatEnterpriseLinuxServer5
-  RedHatEnterpriseLinuxClient5
-  RedHatEnterpriseLinux6
-  RedHatEnterpriseLinux7
-  Fedora17

Your Beaker administrator may have configured compatibility aliases for some OS 
versions, which you can also use in the ``Releases`` field. See 
:ref:`admin-os-versions` in the Administration Guide.
