[global]
# This is where all of your settings go for your production environment.
# You'll copy this file over to your production server and provide it
# as a command-line option to your start script.
# Settings that are the same for both development and production
# (such as template engine, encodings, etc.) all go in 
# beaker/server/config/app.cfg

# DATABASE

# pick the form for your database
# sqlobject.dburi="postgres://username@hostname/databasename"
# sqlobject.dburi="mysql://username:password@hostname:port/databasename"
# sqlobject.dburi="sqlite:///file_name_and_path"

# If you have sqlite, here's a simple default to get you started
# in development
#sqlalchemy.dburi="sqlite:///devdata.sqlite"
sqlalchemy.dburi="mysql://beaker:beaker@localhost/beaker?charset=utf8"
sqlalchemy.pool_recycle = 3600

# If you want to send read-only report queries to a separate slave 
# database, configure it here. If not configured, report queries will 
# fall back to using the main Beaker database (above).
#reports_engine.dburi = 'mysql://beaker_ro:beaker_ro@dbslave/beaker?charset=utf8'
#reports_engine.pool_recycle = 3600

# if you are using a database or table type without transactions
# (MySQL default, for example), you should turn off transactions
# by prepending notrans_ on the uri
# sqlobject.dburi="notrans_mysql://username:password@hostname:port/databasename"

# for Windows users, sqlite URIs look like:
# sqlobject.dburi="sqlite:///drive_letter:/path/to/file"


# Set rlimit_as if you want to limit the beaker processes address space to that
# size in bytes
# rlimit_as=1000000000

# Password for installed systems

test_password='$1$rhts$ShuaoxZPm2Dr79tpoP8NE.'

##
## TurboMail settings
##
mail.on = False
mail.manager = 'immediate'
mail.transport = 'smtp'
mail.provider = 'smtp'
mail.smtp.server = '127.0.0.1'

beaker_email='root@localhost.localdomain'

##
## Authentication
##
# default to 6 hours
visit.timeout=360

#identity.provider='sqlalchemy'
identity.provider='ldapsa'
identity.ldap.enabled=False
#identity.soldapprovider.uri="ldaps://ldap.domain.com"
#identity.soldapprovider.basedn="dc=domain,dc=com"
#identity.soldapprovider.autocreate=True
#identity.krb_auth_principal='HTTP/HOSTNAME@EXAMPLE.COM'
#identity.krb_auth_keytab='/etc/krb5.keytab'

# If using qpid, the principals are used as follows:-
#  identity.krb_auth_qpid_principal - Any calls to the qpid broker uses this value
#  identity.krb_auth_beakerd_principal - Default principal when  code is called from beakerd
#  identity.krb_auth_server_principal - Default principal when code is called from the server
# 
# The idea is that whichever process is running and using qpid, should ensure that it sets the
# krb_auth_qpid_principal to the correct value for itself. Ditto with the keytab

#identity.krb_auth_qpid_principal='beaker-server/HOSTNAME@EXAMPLE.COM'
#identity.krb_auth_qpid_keytab='/etc/beaker/beaker-server.keytab'

#identity.krb_auth_beakerd_principal='beakerd/HOSTNAME@EXAMPLE.COM'
#identity.krb_auth_beakerd_keytab='/etc/beaker/beakerd.keytab'

#identity.krb_auth_server_principal='beaker-server/HOSTNAME@EXAMPLE.COM'
#identity.krb_auth_server_keytab='/etc/beaker/beaker-server.keytab'


# File Locations
basepath.logs='/var/www/beaker/logs'
basepath.rpms='/var/www/beaker/rpms'
basepath.repos='/var/www/beaker/repos'
basepath.harness='/var/www/beaker/harness'

# SERVER

server.socket_port=8084
server.environment="development"

# if this is part of a larger site, you can set the path
# to the TurboGears instance here
server.webpath="/bkr/"

server.log_file = "/var/log/beaker/server.log"
server.log_to_screen = False

autoreload.on = False
tg.strict_parameters = True

# Sets the number of threads the server uses
# server.thread_pool = 1

# Set to True if you are deploying your App behind a proxy
# e.g. Apache using mod_proxy
# base_url_filter.on = False

# Set to True if your proxy adds the x_forwarded_host header
# base_url_filter.use_x_forwarded_host = True

# If your proxy does not add the x_forwarded_host header, set
# the following to the *public* host url.
# (Note: This will be overridden by the use_x_forwarded_host option
# if it is set to True and the proxy adds the header correctly.
# base_url_filter.base_url = "http://www.example.com"

# These are used when generating absolute URLs (e.g. in e-mails sent by Beaker)
tg.url_domain = "beaker.example.com"
tg.url_scheme = "http"

# Tag for distros which are considered "reliable".
# Broken system detection logic will be activated for distros with this tag 
# (see the bkr.server.model:System.suspicious_abort method). Leave this unset 
# to deactivate broken system detection.
#beaker.reliable_distro_tag = "RELEASED"

# The contents of this file will be displayed to users on every page in Beaker. 
# If it exists, it must contain a valid HTML fragment (e.g. <span>...</span>).
#beaker.motd = "/etc/beaker/motd.xml"

# If both of these options are set, the Piwik tracking javascript snippet will
# be embedded in all pages, reporting statistics back to the given Piwik
# installation.
# Make sure that piwik.base_url is a protocol-relative URL starting with //
#piwik.base_url = "//analytics.example.invalid/piwik/"
#piwik.site_id = 123


# Set to True if you wish to enable QPID support for beaker
# Please be aware that qpid libraries will need to be installed
# and the beaker server must be using QPID as well.
# If Setting to true, you must also enable all the other
# beaker.qpid__* config options.
beaker.qpid_enabled = False

# If using qpid, you can uncomment this line to enable the default services
# that you wish to use with qpid (only used if beaker.qpid_enabled is True)
#beaker.qpid_listen_to = ['beaker.service_queue', 'beaker.expired_watchdogs']

#beaker.qpid_topic_exchange = 'amqp.topic'
#beaker.qpid_headers_exchange = 'amqp.headers'

# The queue on which the watchdog can send rpc like calls
#beaker.qpid_service_queue = 'service-queue'

# The hostname of the qpid broker
#beaker.qpid_broker = 'localhost'

# Set to True if the qpid broker requires krb authentication
#beaker.qpid_krb_auth = False

[/logs]
static_filter.on = True
static_filter.dir = "/var/www/beaker/logs"

[/rpms]
static_filter.on = True
static_filter.dir = "/var/www/beaker/rpms"

[/static]
static_filter.on = True
static_filter.dir = "/usr/share/bkr/server/static"

[/favicon.ico]
static_filter.on = True
static_filter.file = "/usr/share/bkr/server/static/images/favicon.ico"

# LOGGING
# Logging configuration generally follows the style of the standard
# Python logging module configuration. Note that when specifying
# log format messages, you need to use *() for formatting variables.
# Deployment independent log configuration is in beaker/server/config/log.cfg
[logging]

[[handlers]]

[[[beakerd_out]]]
class='ConcurrentRotatingFileHandler'
args="('/var/log/beaker/beakerd.log', 'a+', 10*(1024**2), 5)"
formatter='full_content'

[[[debug_out]]]
class='ConcurrentRotatingFileHandler'
level='DEBUG'
args="('/var/log/beaker/server-debug.log', 'a+', 10*(1024**2), 5)"
formatter='full_content'

[[[error_out]]]
class='ConcurrentRotatingFileHandler'
level='WARN'
args="('/var/log/beaker/server-errors.log', 'a+', 10*(1024**2), 5)"
formatter='full_content'

# If you prefer to handle access logging in the application instead of Apache,
# uncomment this handler and enable it for the [[[access]]] logger below.
#[[[access_out]]]
#class='ConcurrentRotatingFileHandler'
#args="('/var/log/beaker/server.log', 'a', 10*(1024**2), 5)"
#formatter='message_only'

[[loggers]]

[[[default]]]
level='INFO'
handlers=['debug_out', 'error_out']

[[[bkr.server]]]
level='DEBUG'
qualname='bkr.server'

[[[beakerd]]]
level='DEBUG'
qualname='beakerd'
propagate=False
handlers=['beakerd_out']

[[[access]]]
level='INFO'
qualname='turbogears.access'
propagate=False
handlers=[]
#handlers=['access_out']
